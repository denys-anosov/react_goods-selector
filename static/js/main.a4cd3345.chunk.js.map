{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","map","good","id","uuidv4","value","App","state","selectedGoods","clearSelection","setState","addGood","goodToAdd","removeGood","goodToRemove","filter","formatHeading","length","slice","join","this","hasGoodsAdded","className","onClick","type","isGoodSelected","includes","buttonCallback","buttonText","buttonToRender","classnames","list__item","active","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6QAUMA,EAA0B,CAC9B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACAC,KAAI,SAAAC,GAAI,MAAK,CACbC,GAAIC,cACJC,MAAOH,MASHI,E,4MACJC,MAAe,CACbC,cAAe,CAAC,Q,EAGlBC,eAAiB,kBAAM,EAAKC,SAAS,CAAEF,cAAe,M,EAEtDG,QAAU,SAACC,GACT,IAAQJ,EAAkB,EAAKD,MAAvBC,cAER,EAAKE,SAAS,CAAEF,cAAc,GAAD,mBAAMA,GAAN,CAAqBI,O,EAGpDC,WAAa,SAACC,GACZ,IAAQN,EAAkB,EAAKD,MAAvBC,cAER,EAAKE,SAAS,CACZF,cAAeA,EAAcO,QAC3B,SAAAb,GAAI,OAAIA,IAASY,Q,EAKvBE,cAAgB,WACd,IAAQR,EAAkB,EAAKD,MAAvBC,cAER,OAAQA,EAAcS,QACpB,KAAK,EACH,MAAO,oBAET,KAAK,EACH,MAAM,GAAN,OAAUT,EAAc,GAAxB,gBAEF,QACE,MAAM,GAAN,OAAUA,EAAcU,MAAM,GAAI,GAAGC,KAAK,MAA1C,0BACOX,EAAcA,EAAcS,OAAS,GAD5C,6B,4CAMN,WAAU,IAAD,OACCT,EAAkBY,KAAKb,MAAvBC,cACFa,EAAgBb,EAAcS,OAAS,EAE7C,OACE,sBAAKK,UAAU,MAAf,UACE,qBAAIA,UAAU,UAAd,4BAEG,IACAF,KAAKJ,mBAEPK,GACC,wBACEC,UAAU,uBACVC,QAASH,KAAKX,eACde,KAAK,SAHP,6BAQF,oBAAIF,UAAU,OAAd,SAEItB,EAAgBC,KACd,SAAAC,GACE,IAAMuB,EAAiBjB,EAAckB,SAASxB,EAAKG,OAE7CsB,EAAiBF,EACnB,kBAAM,EAAKZ,WAAWX,EAAKG,QAC3B,kBAAM,EAAKM,QAAQT,EAAKG,QAEtBuB,EAAaH,EACf,cACA,WAEEI,EACJ,wBACEP,UAAU,SACVE,KAAK,SACLD,QAASI,EAHX,SAKGC,IAIL,OACE,qBACEN,UAAWQ,IAAW,CACpBC,YAAY,EACZC,OAAQP,IAHZ,UAOGvB,EAAKG,MACLwB,IAHI3B,EAAKC,gB,GA1FZ8B,IAAMC,WAyGT5B,ICtIf6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a4cd3345.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport classnames from 'classnames';\nimport './App.scss';\n\ninterface Good {\n  id: string,\n  value: string,\n}\n\nconst goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n].map(good => ({\n  id: uuidv4(),\n  value: good,\n}));\n\ntype Props = {};\n\ninterface State {\n  selectedGoods: string[],\n}\n\nclass App extends React.Component<Props, State> {\n  state: State = {\n    selectedGoods: ['Jam'],\n  };\n\n  clearSelection = () => this.setState({ selectedGoods: [] });\n\n  addGood = (goodToAdd: string) => {\n    const { selectedGoods } = this.state;\n\n    this.setState({ selectedGoods: [...selectedGoods, goodToAdd] });\n  };\n\n  removeGood = (goodToRemove: string) => {\n    const { selectedGoods } = this.state;\n\n    this.setState({\n      selectedGoods: selectedGoods.filter(\n        good => good !== goodToRemove,\n      ),\n    });\n  };\n\n  formatHeading = () => {\n    const { selectedGoods } = this.state;\n\n    switch (selectedGoods.length) {\n      case 0:\n        return 'No goods selected';\n\n      case 1:\n        return `${selectedGoods[0]} is selected`;\n\n      default:\n        return `${selectedGoods.slice(0, -1).join(', ')}\n         and ${selectedGoods[selectedGoods.length - 1]}\n         are selected`;\n    }\n  };\n\n  render() {\n    const { selectedGoods } = this.state;\n    const hasGoodsAdded = selectedGoods.length > 0;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"heading\">\n          Selected goods:\n          {' '}\n          {this.formatHeading()}\n        </h1>\n        {hasGoodsAdded && (\n          <button\n            className=\"button button--clear\"\n            onClick={this.clearSelection}\n            type=\"button\"\n          >\n            Clear selection\n          </button>\n        )}\n        <ul className=\"list\">\n          {\n            goodsFromServer.map(\n              good => {\n                const isGoodSelected = selectedGoods.includes(good.value);\n\n                const buttonCallback = isGoodSelected\n                  ? () => this.removeGood(good.value)\n                  : () => this.addGood(good.value);\n\n                const buttonText = isGoodSelected\n                  ? 'Remove good'\n                  : 'Add good';\n\n                const buttonToRender = (\n                  <button\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={buttonCallback}\n                  >\n                    {buttonText}\n                  </button>\n                );\n\n                return (\n                  <li\n                    className={classnames({\n                      list__item: true,\n                      active: isGoodSelected,\n                    })}\n                    key={good.id}\n                  >\n                    {good.value}\n                    {buttonToRender}\n                  </li>\n                );\n              },\n            )\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}